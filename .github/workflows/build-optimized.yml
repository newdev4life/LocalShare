name: Build Optimized

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: write
  actions: read

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Build frontend
      run: npm run build

    - name: Build for Windows
      run: npm run electron:build -- --win
      env:
        NODE_ENV: production
        ELECTRON_CACHE: ${{ github.workspace }}/.cache/electron
        ELECTRON_BUILDER_CACHE: ${{ github.workspace }}/.cache/electron-builder
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: localshare-windows-optimized
        path: |
          release/*.exe
          release/*.zip
          !release/*.blockmap
          !release/*.yml
        retention-days: 30

  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Update package version
      run: |
        if [ "$GITHUB_REF_TYPE" == "tag" ]; then
          VERSION=$(echo "$GITHUB_REF_NAME" | sed 's/^v//')
          npm version $VERSION --no-git-tag-version
        fi
      shell: bash

    - name: Install dependencies
      run: npm install

    - name: Build frontend
      run: npm run build

    - name: Build for macOS
      run: npm run electron:build -- --mac
      env:
        NODE_ENV: production
        ELECTRON_CACHE: ${{ github.workspace }}/.cache/electron
        ELECTRON_BUILDER_CACHE: ${{ github.workspace }}/.cache/electron-builder
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: localshare-macos-optimized
        path: |
          release/*.dmg
          release/*.zip
          !release/*.blockmap
          !release/*.yml
        retention-days: 30

  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Update package version
      run: |
        if [ "$GITHUB_REF_TYPE" == "tag" ]; then
          VERSION=$(echo "$GITHUB_REF_NAME" | sed 's/^v//')
          npm version $VERSION --no-git-tag-version
        fi
      shell: bash

    - name: Install dependencies
      run: npm install

    - name: Build frontend
      run: npm run build

    - name: Build for Linux
      run: |
        # 设置显示环境变量
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        
        # 检查环境
        echo "🔍 构建环境检查:"
        echo "Node.js 版本: $(node --version)"
        echo "npm 版本: $(npm --version)"
        echo "当前目录: $(pwd)"
        echo "DISPLAY: $DISPLAY"
        
        # 构建 Linux 包
        echo "🚀 开始构建 Linux 包..."
        npm run electron:build -- --linux
        
        # 检查构建结果
        echo "📋 构建完成，检查产物..."
      env:
        NODE_ENV: production
        ELECTRON_CACHE: ${{ github.workspace }}/.cache/electron
        ELECTRON_BUILDER_CACHE: ${{ github.workspace }}/.cache/electron-builder
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: List build artifacts
      run: |
        echo "📦 构建产物列表:"
        ls -la release/ || echo "release 目录不存在"
        find . -name "*.deb" -o -name "*.AppImage" 2>/dev/null || echo "未找到 Linux 包文件"

    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: localshare-linux-optimized
        path: |
          release/*.AppImage
          release/*.deb
          release/*.zip
          !release/*.blockmap
          !release/*.yml
        retention-days: 30

  analyze-size:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      run: npm install

    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Analyze package sizes
      run: |
        echo "📊 优化后的包大小分析:"
        printf '%0.s─' {1..60}; echo
        if [ ! -d artifacts ]; then
          echo "未找到 artifacts 目录"
          exit 0
        fi
        find artifacts -type f -print0 | while IFS= read -r -d '' file; do
          size=$(du -h "$file" | cut -f1)
          echo "$(basename "$file"): $size"
        done